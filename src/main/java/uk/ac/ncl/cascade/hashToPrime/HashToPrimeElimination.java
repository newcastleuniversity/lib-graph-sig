package uk.ac.ncl.cascade.hashToPrime;

import uk.ac.ncl.cascade.zkpgs.parameters.KeyGenParameters;
import uk.ac.ncl.cascade.zkpgs.util.Assert;
import uk.ac.ncl.cascade.zkpgs.util.crypto.Group;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

/**
 * Implements the hash-to-prime by elimination scheme based on the paper:
 * Gross, Thomas, "Hashing to Prime in Zero-Knowledge",
 * Proceedings of the 18th International Conference on Security and Cryptography (SECRYPT 2021)
 */
public class HashToPrimeElimination {

	private Group gr;
	private BigInteger modulus;
	private final KeyGenParameters keyGenParameters;
	private final SquareHashing squareHash;
	private final NaorReingoldPRG nrPRG;
	private SquareHashing sqHash;
	private List<BigInteger> candidates;
	private List<BigInteger> primeSequence;

	/**
	 * Constructs a new hash-to-prime by elimination scheme.
	 * Note that the scheme requires as input an instance of the square hash,
	 * and the Naor-Reingold pseudorandom generator. The key parameters determine the
	 * probability a number is a prime number.
	 *
	 * @param squareHash       the instance of the square hash
	 * @param nrPRG            the instance of the Naor-Reingold pseudorandom generator
	 * @param keyGenParameters the key gen parameters which determine the probability a number is a prime number
	 */
	public HashToPrimeElimination(final SquareHashing squareHash, final NaorReingoldPRG nrPRG, final KeyGenParameters keyGenParameters) {
		Assert.notNull(squareHash, "Square hash is required for the hashToPrime predicate");
		Assert.notNull(nrPRG, "Naor-Reingold PRG is required for the hashToPrime predicate");
		Assert.notNull(keyGenParameters, "Keygen parameters are required for the hashToPrime predicate");

		this.squareHash = squareHash;
		this.nrPRG = nrPRG;
		this.keyGenParameters = keyGenParameters;
	}

	/**
	 * Returns the square hash of the input big integer.
	 *
	 * @param x the big integer x input for the square hash
	 * @return the big integer result of the square hash computation
	 */
	public BigInteger computeSquareHash(final BigInteger x) {
		Assert.notNull(x, "input to square hash must not be empty");
		return this.squareHash.hash(x);
	}


	/**
	 * Returns the prime big integer outputted from the Naor-Reingold pseudorandom generator.
	 * Each time the pseudorandom generator computes a big integer, the method evaluates
	 * if it is a prime. The method returns the prime big integer that the
	 * pseudorandom generator computes.
	 * The candidate big integers previously outputted from the pseudorandom generator are stored
	 * in a big integer list.
	 *
	 * @param input the big integer input for the Naor-Reingold pseudorandom generator
	 * @return the prime big integer the Naor-Reingold pseudorandom generator outputs
	 */
	public BigInteger computePrime(final BigInteger input) {
		Assert.notNull(input, "input to Naor-Reingold pseudorandom generator must not be empty");
		BigInteger number;
		this.candidates = new ArrayList<BigInteger>();
		List<BigInteger> sequence;
		do {
			sequence = this.nrPRG.computeVectorA(input.bitLength() + 1);
			number = computePRG(input, sequence);
			this.candidates.add(number);
		} while (!number.isProbablePrime(this.keyGenParameters.getL_pt()));
		this.primeSequence = sequence;
		return number;
	}

	/**
	 * Returns the sequence of random numbers computed for the Naor-Reingold pseudorandom
	 * generator.
	 *
	 * @return the sequence of random numbers computed for the Naor-Reingold pseudorandom
	 * generator.
	 */
	public List<BigInteger> getPrimeSequence() {
		return this.primeSequence;
	}

	/**
	 * Delegates the computation of the Naor-Reingold pseudorandom generator to the corresponding instance.
	 *
	 * @param message  the input big integer message required for the pseudorandom generator
	 * @param sequence the list of generated random numbers required for the pseudorandom generator
	 * @return the big integer result the pseudorandom generator outputs
	 */
	public BigInteger computePRG(final BigInteger message, List<BigInteger> sequence) {
		return this.nrPRG.compute(message, sequence);
	}

	/**
	 * Returns the list of candidate big integer numbers generated before the Naor-Reingold pseudorandom generator outputs a prime number.
	 *
	 * @return the list of candidate big integers generated by the Naor-Reingold pseudorandom generator
	 */
	public List<BigInteger> getCandidates() {
		return this.candidates;
	}

}
